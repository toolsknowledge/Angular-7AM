Introduction to Angular
-----------------------
    - Angular is the Framework

    - Angular Given By Google.

    - Angular Categorized into 3 types.

        1) AngularJS

        2) Angular2

        3) Angular Material

    - AngularJS used to develop the web applications.

    - we will develop web applications(AngularJS) by using JavaScript.

    - Angular2, used to develop the both web applications and mobile applications.

    - current version of Angular2 is Angular11.

    - Angular11 applications we will develop by using TypeScript.

    - TypeScript is the Programming language, and TypeScript Given by Microsoft.

    - Angular11 Installation Depending on "npm" tool.

    - "npm" stands for node packaging manager.

    - "npm" present in NodeJS.

Software Installation
---------------------
1) download and install "NodeJS"

    - NodeJS containes following tools.

        1) npm

        2) node

        3) npx

    - npm stands for node packaging manager.

    - npm used to install the "Angular11"

    website : https://nodejs.org/en/

    file    : node-v16.1.0-x64.msi

    msi stands for Microsoft Installer.


2) install "yarn" tool

    yarn tool, given by facebook.

    yarn tool, used to download the 3rd party libraries.

    yarn tool, Installation based on following command.

    > npm install -g yarn

    "-g" stands for global Installation.


3) install Angular11

    "Angular11" Installation also command based "Installation".

    > npm install -g @angular/cli

    cli stands for command line interface

    cli tool, used to build the "angular" applications in "faster" manner.


4) link the "yarn" tool to "cli" tool

    > ng config -g cli.packageManager yarn

    where "M" is the capital in "packageManager"


5) download and install Visual Studio Code

    - Visual Studio Code is the IDE given by Microsoft.

    - Visual Studio Code also called as VSCode.

    - VSCode is the open source IDE.

website : https://code.visualstudio.com/download

file    : VSCodeUserSetup-x64-1.56.1.exe


Steps to create the first angular application
=============================================
step 1.
	create the directory    (folder)

    Ex. Angular-7AM  (open with VSCode)


step 2.
    create the angular project

        > ng new firstApp

        where "firstApp" is the name of the angular application


step 3.
    switch to angular application

    > cd firstApp


step 4.
    execute the angular application

    > ng s -o

    - "s" stands for "serve"

    - "-o" stands for open the default browser.

    - the default port number of angular application is "4200"

    - we can change the port number.


directory structure
-------------------

e2e
---
   we have following testings

    1) manual testing

    2) automation testing

        => unit testing

        => integration testing

        => end to end testing

    - e2e stands for nend to end.

    - e2e directory used to write the end to end test cases

node_modules
------------
    node_modules containes libraries.

    these libraries helps to execute the "angular applications" in browser.

src/app
-------
    - it is used to deploy the angular applications

    Ex.
        components

        services

        directives

        single page applications

        ----
        ----
        ----

src/app/app.component.ts
        app.component.html
        app.component.css
        app.component.spec.ts
------------------------------
    where "AppComponent" is the default component.

    "app.component.html" is the default external template to "AppComponent".

    "app.component.css" is the default style sheet for "AppComponent"

    "app.component.spec.ts" is the default testing file for "AppComponent".

src/app/app.module.ts
---------------------

    - this file acting as "registration" file.

    - this file acting as "module".

    - this file used to register the component, services, directives,........

src / assets
------------
    - used to deploy the static resources.

    Ex.
        images

        text files

        xml files

        json files

        ---
        ---
        ---

src / environments
------------------
    - in general, we have three types of environments in real time.

    1) development environment

    2) testing environment

    3) production environment


    - we will configure required environment in "environments" directory

src / favicon.ico
-----------------

    - "favicon.ico" representing default logo of angular.


src/index.html
--------------

    - "index.html" file is the main template.

    - angular starts the execution from "index.html" file.


src/main.ts
------------
    this file acting as intermediate file between app.module.ts and index.html file.

    we will register our applications in app.module.ts file.

    main.ts file immidiately invokes app.module.ts file.

    main.ts file automatically available to index.html file.

src/polyfills.ts
----------------
    - it is used to convert the TypeScript to equalent JavaScript.

src/styles.css
--------------
    - it is used to define the global styles.

src/test.ts
-----------
    - this file acting as supporting file to write unit test cases

.browserslistrc
---------------
    - it containes supporting browsers of angular.


.editorconfig
-------------
    it is a configuration file for "viusla studio code"


.gitignore
----------
    skip the libraries to Repositories.

angular.json
------------
    - it describes the directory structure of angular application.

karma.conf.js
-------------
    - in general we will write unit test cases by using "karma" tool.

    - this file representing configuration file for karma tool.

package.json
------------
    - it is used to download the 3rd party libraries.

tsconfig.app.json
-----------------
    - it is used to configure the application level settings


tsconfig.json
-------------
    - this file acting as configuration file for TypeScript.

tsconfig.spec.json
------------------
    - it is a settings file for all test cases.


tslint.json
------------
    - used to evaluate the syntax related errors.


                                                ***** Component *****

    - Simple TypeScript "class" behaves like Component.

    - Reusable Portion of "Complex UI" Called as Component.

    - As a Angular developer we can provide communication between one component to another component.



steps to create the component

step 1.
    create the angular application

    > ng new component-app

    where "component-app" app is the name of the angular application.

step 2.
    switch to angular application

    > cd component-app

step 3.
    create the component

    *****************************************
    component-app
                src
                  app
                    first.component.ts
                    first.component.html


                    app.module.ts
                index.html
    *****************************************

            where "first.component.ts" file is the "component" file.

            we will display component output in "first.component.html" file.

            we will register component in "app.module.ts" file.

            where index.html file is the main html file.


    **********************************************************
    components-app
                 src
                   app
                     header.component.ts
                     header.component.html

                     body.component.ts
                     body.component.html

                     footer.component.ts
                     footer.component.html


                     main.component.ts
                     main.component.html

                     app.module.ts
                 index.html
    *********************************************************

                                            Services


        - Services are used to share the common business logic to multiple components.

        - we have two types of services.

                1) predefined services

                2) custom services

        - the services provided by angular Framework called as predefined services.

        - the services developed by developer called as custom services.

        - communication between service to components called as dependency injection



step 1.
    create the angular application

    > ng new serviceApp

step 2.
    switch to angular application

    > cd serviceApp

step 3.
    create the service
    
    Ex.
        dbService

    *********************************************
    serviceApp
             src  
                app
                  services
                     db.service.ts
    **********************************************

    finally "dbService" is ready with following functions.

        1) mongoDBData()

        2) cassandraDBData()


step 4.
    create the components

    **************************************************
    serviceApp
             src
               app
                 components
                     mongodb.component.ts
                     mongodb.component.html

                     cassandra.component.ts
                     cassandra.component.html

                     app.module.ts
                 index.html
    **************************************************

        finally "mongodbComponent" is ready with "mongodb" selector.

        and "cassandraComponent" is ready with "cassandra" selector.


                        ***** Rest API Calls ****

steps to implement the rest api call

step 1.
    create the angular application

    where "countriesApp" is the name of the angular application.


step 2.
    switch to angular application

    > cd countriesApp


step 3.
    create the service

   
    *******************************************
    countriesApp
               src
                 app  
                   services
                      countries.service.ts
    *******************************************


    finally "countriesService" is ready with "getCountries()" function.


step 4.
    create the component

    **************************************************
    countriesApp
              src
                app
                 components
                    countries.component.ts
                    countres.component.html
    **************************************************

                                ***** Single Page Applications *****

    - loading one component to another component without refreshing whole webpage called as single page application.

    - loading one component to another component called as Routing.

    - "Routes", used to implement the Routing in Single Page Application.

    - "Routes" present in RouterModule.

    - "Routes" & "RouterModule" present in @angular/router package.

steps to implement the single page application
----------------------------------------------
step 1.
    create the angular application

        > ng new spaDemo1

            where "spaDemo1" is the name of the angular application.

step 2.
    switch to angular application

    > cd spaDemo1


step 3.
    create the components

        we must create 4 components.

        1) MasterComponent

        2) ShirtsComponent

        3) PantsComponent

        4) KidsComponent

        MasterComponent is the root component.

        ShirtsComponent, PantsComponent and KidsComponent are target components.


       > ng g c master --flat true --skipTests --selector=master -is

            "g" stands for generate

            "c" stands for component

            --flat true means deletion of component folder (extra folder)

            --skipTests used to delete the unit test cases

            --selector used to assign the selector to component

            -is stands for inline styles

            -is used to skip the css files generation


step 4.
    implement the business logic in target components


step 5.
    create the router links

        master.component.html

        finally we have following router paths

        1) /shirts

        2) /pants

        3) /kids

step 6.
    implement the routing

    app.routes.ts

        finally "appRoutes" routing member ready

step 7.
    complete registration

    app.module.ts




















































































































